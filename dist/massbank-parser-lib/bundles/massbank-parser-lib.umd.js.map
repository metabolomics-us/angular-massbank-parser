{"version":3,"file":"massbank-parser-lib.umd.js","sources":["../../../projects/massbank-parser-lib/src/lib/massbank-parser-lib.service.ts","../../../projects/massbank-parser-lib/src/lib/massbank-parser-lib.module.ts","../../../projects/massbank-parser-lib/src/public-api.ts","../../../projects/massbank-parser-lib/src/massbank-parser-lib.ts"],"sourcesContent":["import {Inject, Injectable} from '@angular/core';\nimport { NGXLogger} from \"ngx-logger\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MassbankParserLibService {\n\n  constructor(@Inject(NGXLogger) private logger: NGXLogger) { }\n\n  /**\n   * Converts the data using a callback\n   * Follows the MassBank Record Format v2.09\n   * http://www.massbank.jp/manuals/MassBankRecord_en.pdf\n   * @param data\n   * @param callback\n   */\n  convertWithCallback =  (data, callback) => {\n    // Trim white spaces\n    let trim = (str) => {\n      return str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    };\n\n\n    function addMetaData(value, category, spectrum){\n      if (category != null) {\n        category = trim(category);\n      }\n\n      let sub = /(\\w+[\\/]*\\w)\\s(.+)/;\n\n      let match = sub.exec(value);\n\n      if (match == null) {\n        return;\n      }\n\n      // Add metadata as an array\n      let key = trim(match[1].toLowerCase());\n\n      //switch categories\n      if (category == 'FOCUSED_ION') {\n        category = 'MASS_SPECTROMETRY'\n      }\n\n      //let's cutoff the units\n      if (key == 'retention_time') {\n        let reg = /([0-9]+\\.?[0-9]+).*min.*/;\n\n        if (reg.test(match[2])) {\n          spectrum.meta.push({name: (key), value: trim(reg.exec(match[2])[1]), category: (category)});\n        }\n        else {\n          spectrum.meta.push({name: (key), value: trim(match[2]), category: (category)});\n        }\n      }\n\n      //make sure this is a double or ignore it\n      if (key == 'precursor_m/z') {\n        let reg = /([0-9]+\\.?[0-9]+)/g;\n\n        let getIt = reg.exec(match[2]);\n\n        while (getIt != null) {\n          spectrum.meta.push({name: ('precursor m/z'), value: trim(getIt[1]), category: (category)});\n\n          getIt = reg.exec(match[2])\n        }\n      }\n\n      //just deal with it\n      else {\n        spectrum.meta.push({name: (key), value: trim(match[2]), category: (category)});\n      }\n    }\n    // Initial spectrum\n    let spectrum = {names: [], meta: [], inchi: '', comments: '', accurate: true, spectrum: ''};\n\n    // Regular expression for getting the attributes\n    let regexAttr = /\\s*(\\S+):\\s(.+)\\s/g;\n\n    // Regular expression for getting the annotations\n    // Get entire annotation: /(\\s\\s(?:\\d+\\.?\\d*)(?:\\s\\d+)?\\s+[^\\s\\d]+.+)/g\n    let regexAnnotation = /\\s\\s(\\d+\\.?\\d*)(?:\\s\\d+)?\\s+.*(\\[.+\\][\\+\\-]?(?:\\(.+\\))?).*/g;\n\n    // Regular expression for getting subtags and values\n    let regexSubtags = /(\\w+)\\s(.+)/;\n\n    // Regex matches\n    let match;\n\n    let buf = data.toString('utf8');\n\n    // Builds our metadata object\n    while ((match = regexAttr.exec(buf)) != null) {\n      if (match[1] === 'PK$PEAK' || match[1] === 'PK$NUM_PEAK' || match[1] === 'CH$SMILES' || match[1] === 'CH$FORMULA' || match[1] === 'RECORD_TITLE' || match[1] === 'DATE') {\n        //skip\n      }\n      else if (match[1] === 'CH$NAME') {\n        spectrum.names.push(trim(match[2]));\n      }\n      else if (match[1] === 'PK$ANNOTATION') {\n        // Parse annotation entries\n        while ((match = regexAnnotation.exec(data)) != null) {\n          spectrum.meta.push({category: \"annotation\", name: trim(match[2]), value: trim(match[1])});\n        }\n      }\n      else if (match[1] == 'CH$IUPAC' || match[1] == 'CH$INCHI') {\n        match[2] = trim(match[2]);\n\n        if (match[2].indexOf('InChI=') > -1) {\n          // Look for second instance of 'InChI='\n          let idx = match[2].indexOf('InChI=');\n          idx = match[2].indexOf('InChI=', idx + 1);\n\n          if (idx > -1) {\n            spectrum.inchi = trim(match[2].substring(idx));\n          } else {\n            spectrum.inchi = match[2];\n          }\n        } else {\n          spectrum.names.push(match[2])\n        }\n      }\n      else if (match[1] == 'COMMENT') {\n        spectrum.comments = trim(match[2]);\n      }\n      else {\n        if (match[1].indexOf('LINK') > -1) {\n          addMetaData(match[2], match[1], spectrum);\n        } else if (match[1] === 'AC$MASS_SPECTROMETRY') {\n          addMetaData(match[2], match[1], spectrum);\n        } else if (match[1] === 'AC$CHROMATOGRAPHY') {\n          addMetaData(match[2], match[1], spectrum);\n        } else if (match[1] == 'MS$FOCUSED_ION') {\n          addMetaData(match[2], match[1], spectrum);\n        }\n        else if (match[1] == 'MS$DATA_PROESSING') {\n          addMetaData(match[2], match[1], spectrum);\n        }\n\n        else {\n          spectrum.meta.push({name: trim(match[1]), value: trim(match[2])});\n        }\n      }\n    }\n\n    let reg = /^(?:[a-zA-Z\\s])*\\$(.*)$/i;\n\n    for (let i = 0; i < spectrum.meta.length; i++) {\n      let object = spectrum.meta[i];\n\n      if (reg.test(object.name)) {\n        object.name = reg.exec(object.name)[1];\n      }\n\n\n      if (object.category != null && reg.test(object.category)) {\n        object.category = reg.exec(object.category)[1];\n      }\n    }\n\n    // Builds the spectrum\n    // Floating point/scientific notation regex:\n    //     (?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?\n    // from: http://stackoverflow.com/a/658662/406772\n    let regexSpectra = /\\s\\s((?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)\\s((?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)\\s(\\d+)\\b/g;\n\n    /**\n     * is this an accurate mass\n     * @type {RegExp}\n     */\n    let regExAccurateMass = /([0-9]*\\.?[0-9]{3,})/;\n\n    let ions = [];\n\n    let isAbsolute = false;\n\n    while ((match = regexSpectra.exec(buf)) != null) {\n      // Convert scientific notation\n      if (match[1].toLowerCase().indexOf('e') > -1) {\n        match[1] = parseFloat(match[1]).toString();\n      }\n      if (match[2].toLowerCase().indexOf('e') > -1) {\n        match[2] = parseFloat(match[2]).toString();\n      }\n      if (match[3].toLowerCase().indexOf('e') > -1) {\n        match[3] = parseFloat(match[3]).toString();\n      }\n\n      if (match[2] > 0) {\n        isAbsolute = true;\n      }\n\n      ions.push([match[1], match[2], match[3]]);\n\n      // Used to determine if this is an accurate mass spectra or not\n      if (!regExAccurateMass.test(match[1])) {\n        spectrum.accurate = false;\n      }\n    }\n\n    // Replace intensities with absolute or relative intensities\n    for (let i = 0; i < ions.length; i++) {\n      if (isAbsolute) {\n        ions[i] = ions[i][0] + ':' + ions[i][1];\n      } else {\n        ions[i] = ions[i][0] + ':' + ions[i][2];\n      }\n    }\n\n    // Join ions to create spectrum string\n    spectrum.spectrum = ions.join(' ');\n\n\n    // Make sure we have at least a spectrum and name before returning the spectrum\n    if (ions.length && spectrum.names.length) {\n      callback(spectrum);\n    }\n    else {\n      this.logger.warn(\"was no able to find valid spectra for record:\\n\\n\" + data + \"\\n\\n build object was:\\n\\n\" + JSON.stringify(spectrum));\n    }\n  };\n\n  /**\n   * converts the data using a callback\n   * @param data\n   * @param callback\n   */\n  convertFromData =  (data, callback) => {\n    return this.convertWithCallback(data, callback);\n  };\n\n  /**\n   * counts the number of mass spectra in this library file\n   * @param data\n   * @returns {number}\n   */\n  countSpectra =  (data) => {\n    let count = 0;\n    let pos = -1;\n\n    while ((pos = data.indexOf('PK$NUM_PEAK', pos + 1)) != -1) {\n      count++;\n    }\n\n    // Massbank record files are only valid if they have a single spectrum\n    return (count <= 1 ? count : 0);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MassbankParserLibService } from './massbank-parser-lib.service';\nimport {LoggerModule, NgxLoggerLevel} from \"ngx-logger\";\n\n\n@NgModule({\n  imports: [\n    LoggerModule.forRoot({\n      level: NgxLoggerLevel.DEBUG,\n      serverLogLevel: NgxLoggerLevel.OFF\n    })\n  ],\n  providers: [MassbankParserLibService]\n})\nexport class MassbankParserLibModule { }\n","/*\n * Public API Surface of massbank-parser-lib\n */\n\nexport * from './lib/massbank-parser-lib.service';\nexport * from './lib/massbank-parser-lib.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["NGXLogger","Injectable","Inject","LoggerModule","NgxLoggerLevel","NgModule"],"mappings":"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"}